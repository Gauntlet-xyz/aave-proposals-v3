{"abi":[{"type":"function","name":"getFullPropositionPower","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getFullVotingPower","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getFullPropositionPower(address)":"853bcd03","getFullVotingPower(address)":"ee0c8554"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFullPropositionPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFullVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getFullPropositionPower(address)\":{\"params\":{\"user\":\"address where we want to get the power from\"},\"returns\":{\"_0\":\"full proposition power of a user\"}},\"getFullVotingPower(address)\":{\"params\":{\"user\":\"address where we want to get the power from\"},\"returns\":{\"_0\":\"full voting power of a user\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getFullPropositionPower(address)\":{\"notice\":\"method to get the full proposal power of an user. It is not needed to protect against FlashLoan attacks because once user returns the tokens (power) the proposal will get canceled as proposal creator will loose the proposition power.\"},\"getFullVotingPower(address)\":{\"notice\":\"method to get the full voting power of an user. This method is only use for consulting purposes. As its not used for voting calculations, it is not needed to force blockNumber - 1 to protect against FlashLoan attacks.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/aave-helpers/lib/aave-address-book/src/governance-v3/IGovernancePowerStrategy.sol\":\"IGovernancePowerStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@aave/core-v3/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-core/\",\":@aave/periphery-v3/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-periphery/\",\":aave-address-book/=lib/aave-helpers/lib/aave-address-book/src/\",\":aave-helpers/=lib/aave-helpers/src/\",\":aave-v3-core/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-core/\",\":aave-v3-periphery/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-periphery/\",\":ds-test/=lib/aave-helpers/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/aave-helpers/lib/forge-std/src/\",\":governance-crosschain-bridges/=lib/aave-helpers/lib/governance-crosschain-bridges/\",\":solidity-utils/=lib/aave-helpers/lib/solidity-utils/src/\"]},\"sources\":{\"lib/aave-helpers/lib/aave-address-book/src/governance-v3/IGovernancePowerStrategy.sol\":{\"keccak256\":\"0x76aa9c593f99c1187a45d19dbc11cfbbc558db303e137d70d2d7201faf8eeefe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d005e30fae7ff63a4d726cd7e575dbf700bd6db3813ddb4374e18eec1049feaf\",\"dweb:/ipfs/QmNzY2R8cTHkvzJ9VHGTgWWmQqotZAs8Gu8kg3S9Nk7V2Y\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"getFullPropositionPower","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"getFullVotingPower","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"getFullPropositionPower(address)":{"params":{"user":"address where we want to get the power from"},"returns":{"_0":"full proposition power of a user"}},"getFullVotingPower(address)":{"params":{"user":"address where we want to get the power from"},"returns":{"_0":"full voting power of a user"}}},"version":1},"userdoc":{"kind":"user","methods":{"getFullPropositionPower(address)":{"notice":"method to get the full proposal power of an user. It is not needed to protect against FlashLoan attacks because once user returns the tokens (power) the proposal will get canceled as proposal creator will loose the proposition power."},"getFullVotingPower(address)":{"notice":"method to get the full voting power of an user. This method is only use for consulting purposes. As its not used for voting calculations, it is not needed to force blockNumber - 1 to protect against FlashLoan attacks."}},"version":1}},"settings":{"remappings":["@aave/core-v3/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-core/","@aave/periphery-v3/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-periphery/","aave-address-book/=lib/aave-helpers/lib/aave-address-book/src/","aave-helpers/=lib/aave-helpers/src/","aave-v3-core/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-core/","aave-v3-periphery/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-periphery/","ds-test/=lib/aave-helpers/lib/forge-std/lib/ds-test/src/","forge-std/=lib/aave-helpers/lib/forge-std/src/","governance-crosschain-bridges/=lib/aave-helpers/lib/governance-crosschain-bridges/","solidity-utils/=lib/aave-helpers/lib/solidity-utils/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/aave-helpers/lib/aave-address-book/src/governance-v3/IGovernancePowerStrategy.sol":"IGovernancePowerStrategy"},"evmVersion":"paris","libraries":{}},"sources":{"lib/aave-helpers/lib/aave-address-book/src/governance-v3/IGovernancePowerStrategy.sol":{"keccak256":"0x76aa9c593f99c1187a45d19dbc11cfbbc558db303e137d70d2d7201faf8eeefe","urls":["bzz-raw://d005e30fae7ff63a4d726cd7e575dbf700bd6db3813ddb4374e18eec1049feaf","dweb:/ipfs/QmNzY2R8cTHkvzJ9VHGTgWWmQqotZAs8Gu8kg3S9Nk7V2Y"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/aave-helpers/lib/aave-address-book/src/governance-v3/IGovernancePowerStrategy.sol","id":16702,"exportedSymbols":{"IGovernancePowerStrategy":[16701]},"nodeType":"SourceUnit","src":"32:985:74","nodes":[{"id":16684,"nodeType":"PragmaDirective","src":"32:23:74","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":16701,"nodeType":"ContractDefinition","src":"57:959:74","nodes":[{"id":16692,"nodeType":"FunctionDefinition","src":"465:74:74","nodes":[],"documentation":{"id":16685,"nodeType":"StructuredDocumentation","src":"96:366:74","text":" @notice method to get the full voting power of an user. This method is only use for consulting purposes.\nAs its not used for voting calculations, it is not needed to force blockNumber - 1 to protect against\nFlashLoan attacks.\n @param user address where we want to get the power from\n @return full voting power of a user"},"functionSelector":"ee0c8554","implemented":false,"kind":"function","modifiers":[],"name":"getFullVotingPower","nameLocation":"474:18:74","parameters":{"id":16688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16687,"mutability":"mutable","name":"user","nameLocation":"501:4:74","nodeType":"VariableDeclaration","scope":16692,"src":"493:12:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":16686,"name":"address","nodeType":"ElementaryTypeName","src":"493:7:74","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"492:14:74"},"returnParameters":{"id":16691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16690,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":16692,"src":"530:7:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":16689,"name":"uint256","nodeType":"ElementaryTypeName","src":"530:7:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"529:9:74"},"scope":16701,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":16700,"nodeType":"FunctionDefinition","src":"935:79:74","nodes":[],"documentation":{"id":16693,"nodeType":"StructuredDocumentation","src":"543:389:74","text":" @notice method to get the full proposal power of an user. It is not needed to protect against FlashLoan\nattacks because once user returns the tokens (power) the proposal will get canceled as proposal creator\nwill loose the proposition power.\n @param user address where we want to get the power from\n @return full proposition power of a user"},"functionSelector":"853bcd03","implemented":false,"kind":"function","modifiers":[],"name":"getFullPropositionPower","nameLocation":"944:23:74","parameters":{"id":16696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16695,"mutability":"mutable","name":"user","nameLocation":"976:4:74","nodeType":"VariableDeclaration","scope":16700,"src":"968:12:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":16694,"name":"address","nodeType":"ElementaryTypeName","src":"968:7:74","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"967:14:74"},"returnParameters":{"id":16699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":16700,"src":"1005:7:74","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":16697,"name":"uint256","nodeType":"ElementaryTypeName","src":"1005:7:74","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1004:9:74"},"scope":16701,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IGovernancePowerStrategy","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[16701],"name":"IGovernancePowerStrategy","nameLocation":"67:24:74","scope":16702,"usedErrors":[]}],"license":"MIT"},"id":74}